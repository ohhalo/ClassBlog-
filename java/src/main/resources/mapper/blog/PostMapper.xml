<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.somecoder.demo.blog.mapper.PostMapper">
    <resultMap id="GetPostListResponse" type="com.somecoder.demo.blog.entity.response.GetPostListResponse">
        <result column="post_id" property="postId"/>
        <result column="post_theme" property="postTheme"/>
        <result column="post_content" property="postContent"/>
        <result column="sort_theme" property="sortTheme"/>
        <result column="is_top" property="isTop"/>
        <result column="update_time" property="updateTime"/>
        <result column="name" property="name"/>
        <result column="upvote_count" property="upvoteCount"/>
        <result column="comment_count" property="commentCount"/>
    </resultMap>
    <select id="getPostList" resultMap="GetPostListResponse">
        select p.post_id, p.post_theme, p.post_content, st.sort_theme, p.is_top,
               date_format(p.create_time,'%Y-%m-%d %H:%i:%s') update_time, s.name,
               count(distinct u.id) upvote_count, count(distinct cm.id) comment_count
        from post p
        join student s
            on s.user_id = p.user_id
                and s.is_deleted = 0
        left join upvote u
            on u.post_id = p.post_id
                and u.is_deleted = 0
        left join collect cl
            on cl.post_id = p.post_id
                and cl.is_deleted = 0
        left join comment cm
            on cm.post_id = p.post_id
                and cm.is_deleted = 0
        left join sort st
            on st.sort_id = p.sort_id
                and st.is_deleted = 0
        <where>
            p.is_deleted = 0
            <if test="postListQueryDto.sortId != null and postListQueryDto.sortId != ''">
                and p.sort_id like #{postListQueryDto.sortId}
            </if>
            <if test="postListQueryDto.keyword != null and postListQueryDto.keyword != ''">
                and concat(p.post_theme, p.post_content) like '%${postListQueryDto.keyword}%'
            </if>
        </where>
        group by p.post_id
        order by p.is_top desc, p.create_time desc
    </select>

    <select id="getPostDetail" resultMap="GetPostDetailResponse">
        select
            p.post_id,
            p.user_id,
            p.post_content,
            p.post_theme,
            DATE_FORMAT(p.create_time, '%Y-%m-%d %H:%i:%s') create_time,
            st.sort_theme,
            s.`name`,
            s.head_pic_url
        from post p
                left join student s
                    on p.user_id = s.user_id
                        and s.is_deleted = 0
                left join sort st
                    on st.sort_id = p.sort_id
                        and st.is_deleted = 0
        <where>
            p.post_id = #{post_id}
        </where>
    </select>
    <resultMap id="GetPostDetailResponse" type="com.somecoder.demo.blog.entity.response.GetPostDetailResponse">
        <result column="post_id" property="postId"/>
        <result column="user_id" property="userId"/>
        <result column="post_content" property="postContent"/>
        <result column="post_theme" property="postTheme"/>
        <result column="create_time" property="updateTime"/>
        <result column="sort_theme" property="sortTheme"/>
        <result column="name" property="name"/>
        <result column="head_pic_url" property="headPicUrl"/>
    </resultMap>

</mapper>
